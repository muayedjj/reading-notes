# What Is a File?

***A file is a contiguous set of bytes used to store data.***

<br/>

### Files on most modern file systems are composed of three main parts:

- Header: metadata about the contents of the file (file name, size, type, and so on)
- Data: contents of the file as written by the creator or editor
- End of file (EOF): special character that indicates the end of the file

![FileFormat](FileFormat.webp)

## File Paths
 The file path is a string that represents the location of a file. It’s broken up into three major parts:

- Folder Path: the file folder location on the file system where subsequent folders are separated by a forward slash / (Unix) or backslash \ (Windows)
- File Name: the actual name of the file
- Extension: the end of the file path pre-pended with a period (.) used to indicate the file type


> *The double-dot (**`..`**) can be chained together to traverse multiple directories above the current directory.* [1]

## Line Endings
Windows uses the CR+LF characters to indicate a new line, while Unix and the newer Mac versions use just the LF character.

> *The line ending has its roots from back in the Morse Code era, when a specific pro-sign was used to communicate the end of a transmission or the end of a line.*

## Character Encodings
The two most common encodings are the ASCII and **UNICODE** Formats. **ASCII** can only store 128 characters, while Unicode can contain up to 1,114,112 characters.

**ASCII** is actually a subset of **Unicode** ***(UTF-8)***, meaning that **ASCII** and **Unicode** share the same numerical to character values. It’s important to note that parsing a file with the incorrect character encoding can lead to failures or misrepresentation of the character.

## Opening and Closing a File in Python
When you want to work with a file, the first thing to do is to open it. This is done by invoking the `open()` built-in function. `open()` has a single required argument that is the path to the file. `open()` has a single return, the file object:

`file = open('file_name.txt')`
> ***You should always make sure that an open file is properly closed.*** [1]

> *It’s also a best practice within Python (Pythonic) to make sure that your code behaves in a way that is well defined and reduces any unwanted behavior.*


## Tips and Tricks
Now that you’ve mastered the basics of reading and writing files, here are some tips and tricks to help you grow your skills.

`__file__`
The `__file__` attribute is a special attribute of modules, similar to `__name__.` It is:

“the pathname of the file from which the module was loaded, if it was loaded from a file.” (Source

Note: To re-iterate,`__file__` returns the path relative to where the initial Python script was called. If you need the full system path, you can use `os.getcwd()` to get the current working directory of your executing code.

### There are built-in libraries out there that you can use to help you:

- wave: read and write WAV files (audio)
- aifc: read and write AIFF and AIFC files (audio)
- sunau: read and write Sun AU files
- tarfile: read and write tar archive files
- zipfile: work with ZIP archives
- configparser: easily create and parse configuration files
- xml.etree.ElementTree: create or read XML based files
- msilib: read and write Microsoft Installer files
- plistlib: generate and parse Mac OS X .plist files

<br/>

<hr/>
<hr/>

<br/>

# Python Exceptions

## Raising an Exception

We can use `raise` to throw an exception if a condition occurs. The statement can be complemented with a custom exception.

![raise](./raise.webp)

## The `AssertionError` Exception

Instead of waiting for a program to crash midway, you can also start by making an ***assertion*** in Python. We assert that a certain condition is met. If this condition turns out to be True, then that is excellent! The program can continue. If the condition turns out to be False, you can have the program throw an `AssertionError` exception.

![assert](./assert.webp)

## The try and except Block: Handling Exceptions
The try and except block in Python is used to catch and handle exceptions. Python executes code following the try statement as a “normal” part of the program. The code that follows the except statement is the program’s response to any exceptions in the preceding try clause.

![assert](./try_except.webp)





## I would like to know more about
- how to decode characters using `unicode` and `ASCII`
- How exceptions are related to `interrupt` in low level languages.


[1]: https://realpython.com/read-write-files-python/
[2]: https://realpython.com/python-exceptions/